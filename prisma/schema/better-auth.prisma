// ❗ Do NOT edit this file !
// Follow Better-Auth documentation to update this file or run :
// `npx @better-auth/cli generate --output prisma/schema/better-auth.prisma`

model User {
  id               String   @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  resendContactId  String?
  stripeCustomerId String?
  role             String?  @default("user") // e.g. admin, user, guest
  sexe             Sexe     @default(Male)

  // Outgoing
  sessions    Session[]
  accounts    Account[]
  feedbacks   Feedback[]
  members     Member[]
  invitations Invitation[]
  Anwser      Anwser[]

  @@unique([email])
  @@map("user")
}

enum Sexe {
  Male
  Female
  Other
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id             String     @id
  name           String
  contact        String?
  address        String?
  slug           String?
  logo           String?
  cv             String?
  description    String[]   @default(["", "", ""])
  graduation     String?
  approvalNumber String?
  email          String?
  metadata       String?
  paymentType    String[] // Mode de paiement (ex: cash, card, mobile-money, cheque, transfer)
  experiences    Int        @default(1)
  isQuestion     Boolean    @default(true)
  createdAt      DateTime
  lang           Language[] @default([fr])
  longitude      String?
  latitude       String?

  cityId       String? // Relation avec une ville spécifique
  careTypeId   String?
  specialityId String?

  speciality Speciality? @relation(fields: [specialityId], references: [id])
  careType   CareType?   @relation(fields: [careTypeId], references: [id])
  city       City?       @relation(fields: [cityId], references: [id])

  specialisations            Specialisation[]
  members                    Member[]
  invitations                Invitation[]
  contactList                Contact[]
  experiencesList            Experience[]
  formationsList             Formation[]
  conferencesList            Conference[]
  associationsList           Association[]
  researchList               Research[]
  OrganizationSpecialisation OrganizationSpecialisation[]
  consultationTypes          ConsultationType[]           @relation("OrganizationToConsultationTypes")
  Question                   Question[]
  Consultation               Consultation[]
  Avis                       Avis[]
  Unavailability             Unavailability[]
  OrganizationsHours         OrganizationsHours[]
  OrganizationClient         OrganizationClient[]
  OrganizationPet            OrganizationPet[]
  BreedOrganization          BreedOrganization[]
  ExceptionalAvailability    ExceptionalAvailability[]
  GoogleCalendarIntegration  GoogleCalendarIntegration[]
  ConsultationTypeDetails    ConsultationTypeDetails[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?

  @@map("subscription")
}
